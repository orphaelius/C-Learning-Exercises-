// Knight's Tour //

/*
Can the knight chess piece move around an empty chessboard
and touch each of the 64 squares only once?

the knight makes l-shaped moves (two in one directions, then one
in perpendicular direction. thus, from a square in the middle of an
empty chessboard, the knight can make eight different moves (0 -7),

- board is represented as an 8*8 2d array (board)
- each square is initialized to 0
- a knight's move is described as having a horizontal element
	and a vertical element (int horizontalMove, int verticalMove?)
- currentRow and currentColumn indicate the row and column of the
	knight's positioning. to make a move of type moveNumber, where
	moveNumber is between 0 and 7, your program uses the statements:

	a) currentRow += vertical[moveNumber]
	b) currentColumn += horizontal[moveNumber]

- keep a counter that varies from 1 to 64. record the last count in
	each square the knight moves to. remember to test each potential
	move to see if the knight has already visited that square and
	ensure the knight doesn't land off the chessboard

- move te knight around the board!

*/

#include <stdio.h>
#define ROWS 8 // Chessboard row count
#define COLUMNS 8 // Chessboard column count
#define OPTIONS 10 // Total options for instructions array
#define CHARLIM 30 // Maximum characters allowed in string
#define SINGLE 1 // Move one place
#define DOUBLE 2 // Move two places

// Function prototypes
void displayDescription(void); // Obvious
// Displays instructions
void displayInstructions(char array[OPTIONS][CHARLIM]);
int getSwitchKey(int* key); // Get the key
// Moves knigh around chessboard in an array of directions
void moveDirection(int array[ROWS][COLUMNS], int* knightX, int* knightY, int key); 
void printChessboard(int array[ROWS][COLUMNS], int* knightX, int* knightY);

int main(void) {
	// 2D "chessboard" 
	int board[ROWS][COLUMNS] = { 0 };
	// Instructions for user input/knight movement
	char instructions[OPTIONS][CHARLIM] =
	{ "(0) to move north 1, east 2",
	  "(1) to move north 2, east 1",
	  "(2) to move north 2, west 1",
	  "(3) to move north 1, west 2",
	  "(4) to move south 1, west 2",
	  "(5) to move south 2, west 1",
	  "(6) to move south 2, east 1",
	  "(7) to move south 1, east 2",
	  "(-1) to exit",
	  "(9) to print the chessboard"};

	int knightX = 4; // Position in row
	int knightY = 4; // Position in column
	board[knightX][knightY] = 1;
	int key = 0; // Switch key

	displayDescription();
	displayInstructions(instructions);


	while ((key == getSwitchKey(&key)) != -1) {

		switch (key) {

		case 0:  
			moveDirection(board, &knightX, &knightY, key);
			break;
		case 1:
			moveDirection(board, &knightX, &knightY, key);
			break;
		case 2:
			moveDirection(board, &knightX, &knightY, key);
			break;
		case 3:
			moveDirection(board, &knightX, &knightY, key);
			break;
		case 4:
			moveDirection(board, &knightX, &knightY, key);
			break;
		case 5:
			moveDirection(board, &knightX, &knightY, key);
			break;
		case 6:
			moveDirection(board, &knightX, &knightY, key);
			break;
		case 7:
			moveDirection(board, &knightX, &knightY, key);  
			break;
		case 9:
			printChessboard(board, &knightX, &knightY); 
			break;
		}

		displayInstructions(instructions);
	}
} // End main

void displayDescription(void) {
	printf("%s %s\n", "Move your knight around an otherwise empty chessboard using",
		"various prompts.");
} // End displayDescription

void displayInstructions(char array[OPTIONS][CHARLIM]) {
	puts("\nChoose from the options below:");
	for (size_t i = 0; i < OPTIONS; ++i) {
		for (size_t j = 0; j < CHARLIM; ++j) {
			printf("%c", array[i][j]);
		}
		puts("");
	}
	printf("Input: ");
} // End displayInstructions

int getSwitchKey(int* key) {
	scanf("%d", key);
	return *key;
} // End getSwitchKey

void moveDirection(int array[ROWS][COLUMNS], int* knightX, int* knightY, int key) {
	array[*knightX][*knightY] = 0;
	/*


	  
	  
	  
	 
	  
	  "(7) to move south 1, east 2",
	*/


	if (key == 0) {	// North 1, East 2 // 	
		(*knightX)--; // North 1 		
		for (int i = 0; i < DOUBLE; ++i) {
			(*knightY)++; // East 2
		}		
	}
	else if (key == 1) { // North 2, East 1 // 
		for (int i = 0; i < DOUBLE; ++i) {
			(*knightX)--; 
		}			
		(*knightY)++;
	} 
	else if (key == 2) { // North 2, West 1 // 
		for (int i = 0; i < DOUBLE; ++i) { 
			(*knightX)--;
		}		
		(*knightY)--; 
	} 
	else if (key == 3) { // North 1, West 2 // 
		(*knightX)--; 		
		for (int i = 0; i < DOUBLE; ++i) { 
			(*knightY)--;
		}
	}
	else if (key == 4) { // South 1, West 2 // 
		(*knightX)++;
		for (int i = 0; i < DOUBLE; ++i) {
			(*knightY)--;
		}
	}
	else if (key == 5) { // South 2, West 1 // 		
		for (int i = 0; i < DOUBLE; ++i) {
			(*knightX)++; 
		}
		(*knightY)--;
	}
	else if (key == 6) { // South 2, East 1 // 		
		for (int i = 0; i < DOUBLE; ++i) {
			(*knightX)++;
		}
		(*knightY)++;
	}
	else { // South 1, East 2 // 		
		(*knightX)++;
		for (int i = 0; i < DOUBLE; ++i) {
			(*knightY)++; 
		}		
	}
	array[*knightX][*knightY] = 1;	
}

void printChessboard(int array[ROWS][COLUMNS], int* knightX, int* knightY) {
	for (size_t i = 0; i < ROWS; ++i) {
		for (size_t j = 0; j < COLUMNS; ++j) {
			printf("%d ", array[i][j]);
		}
		puts("");			
	}

}

