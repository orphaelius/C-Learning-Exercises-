// Knight's Tour //

/*


	a) currentRow += vertical[moveNumber]
	b) currentColumn += horizontal[moveNumber]

- keep a counter that varies from 1 to 64. record the last count in
	each square the knight moves to. remember to test each potential
	move to see if the knight has already visited that square and
	ensure the knight doesn't land off the chessboard

- move te knight around the board!

*/

#include <stdio.h>
#define ROWS 8 // Chessboard row count
#define COLUMNS 8 // Chessboard column count
#define OPTIONS 11 // Total options for instructions array
#define CHARLIM 30 // Maximum characters allowed in string
#define SINGLE 1 // Move one place
#define DOUBLE 2 // Move two places

// Function prototypes
void displayDescription(void); // Obvious
// Displays instructions
void displayInstructions(char array[OPTIONS][CHARLIM]);
int getSwitchKey(int* key); // Get the key
// Moves knigh around chessboard in an array of directions
void moveDirection(int board[ROWS][COLUMNS], int beenHere[ROWS][COLUMNS], int* knightX, int* knightY, int key);
void printChessboard(int array[ROWS][COLUMNS], int* knightX, int* knightY);
void hasVisited(int array[ROWS][COLUMNS], int* knightX, int* knightY);

int main(void) {
	// 2D "chessboard" 
	int board[ROWS][COLUMNS] = { 0 };
	// Board to track all "squares" the knight has visited
	int beenHere[ROWS][COLUMNS] = { 0 };
	// Instructions for user input/knight movement
	char instructions[OPTIONS][CHARLIM] =
	{ "(0) to move north 1, east 2",
	  "(1) to move north 2, east 1",
	  "(2) to move north 2, west 1",
	  "(3) to move north 1, west 2",
	  "(4) to move south 1, west 2",
	  "(5) to move south 2, west 1",
	  "(6) to move south 2, east 1",
	  "(7) to move south 1, east 2",
	  "(-1) to exit",
	  "(9) to print the chessboard",
	  "(10) to print beenHere" };

	int knightX = 4; // Row number
	int knightY = 4; // Column number
	board[knightX][knightY] = 1;
	int key = 0; // Switch key

	displayDescription();
	displayInstructions(instructions);

	while ((key == getSwitchKey(&key)) != -1) {

		switch (key) {

		case 0:
			moveDirection(board, beenHere, &knightX, &knightY, key);
			break;
		case 1:
			moveDirection(board, beenHere, &knightX, &knightY, key);
			break;
		case 2:
			moveDirection(board, beenHere, &knightX, &knightY, key);
			break;
		case 3:
			moveDirection(board, beenHere, &knightX, &knightY, key);
			break;
		case 4:
			moveDirection(board, beenHere, &knightX, &knightY, key);
			break;
		case 5:
			moveDirection(board, beenHere, &knightX, &knightY, key);
			break;
		case 6:
			moveDirection(board, beenHere, &knightX, &knightY, key);
			break;
		case 7:
			moveDirection(board, beenHere, &knightX, &knightY, key);
			break;
		case 9:
			printChessboard(board, &knightX, &knightY);
			break;
		case 10:
			printChessboard(beenHere, &knightX, &knightY);
			break;
		}

		displayInstructions(instructions);
	}
} // End main

/******************************************************************************
	Function: displayDescription()
	Description: Prints instructions for playing the game
	Side Effects: ---
	Parameters: ---
	Return: ---
******************************************************************************/
void displayDescription(void) {
	printf("%s %s\n", "Move your knight around an otherwise empty chessboard using",
		"various prompts.");
} // End displayDescription

/******************************************************************************
	Function: displayInstructions()
	Description: Prints instructions for playing the game
	Side Effects: ---
	Parameters: char array instructions[][], array for instruction strings
	Return: ---
******************************************************************************/
void displayInstructions(char array[OPTIONS][CHARLIM]) {
	puts("\nChoose from the options below:");
	for (size_t i = 0; i < OPTIONS; ++i) {
		for (size_t j = 0; j < CHARLIM; ++j) {
			printf("%c", array[i][j]);
		}
		puts("");
	}
	printf("Input: ");
} // End displayInstructions

/******************************************************************************
	Function: getSwitchKey()
	Description: Grabs switch key
	Side Effects: Points to "key" value, changes it
	Parameters: Pointer to "key"
	Return: key
******************************************************************************/
int getSwitchKey(int* key) {
	scanf("%d", key);
	return *key;
} // End getSwitchKey

/******************************************************************************
	Function: moveDirection()
	Description: Moves knight in a particular direction depending on input
	Side Effects: Resets former position of knight by resetting place to "0",
		changes current position of knight on "chessboard"
	Parameters: chessboard array, pointers to knightX and knightY, switch key
	Return: ---
******************************************************************************/
void moveDirection(int board[ROWS][COLUMNS], int beenHere[ROWS][COLUMNS], int* knightX, int* knightY, int key) {

	board[*knightX][*knightY] = 0; // Reset currently position	
	hasVisited(beenHere, knightX, knightY);
	int dx = 0; // "Delta" for row
	int dy = 0; // "Delat" for column

	switch (key) {

	case 0: // North 1, East 2 // 
		dx = -1; dy = 2;
		break;
	case 1: // North 2, East 1 // 
		dx = -2; dy = 1;
		break;
	case 2: // North 2, West 1 //
		dx = -2; dy = -1;
		break;
	case 3: // North 1, West 2 // 
		dx = -1; dy = -2;
		break;
	case 4: // South 1, West 2 // 
		dx = 1; dy = -2;
		break;
	case 5: // South 2, West 1 // 
		dx = 2; dy = -1;
		break;
	case 6: // South 2, East 1 // 	
		dx = 2; dy = 1;
		break;
	case 7: // South 1, East 2 // 
		dx = 1; dy = 2;
		break;
	}
	// Knight position in row = dx values added to
	// current position (and same formula for column position)
	*knightX += dx; 
	*knightY += dy;
	board[*knightX][*knightY] = 1; // Value on board = 1
} // End moveDirection

/******************************************************************************
	Function: hasVisited()
	Description: Keep track of every position knight has visited on the board
	Side Effects: Changes hasBeen array elements to 1 if visited
	Parameters: board array, hasBeen array
	Return: NOT SURE YET
******************************************************************************/
void hasVisited(int beenHere[ROWS][COLUMNS], int* knightX, int* knightY) {
	for (int track = 0; track < 3; ++track) {
		beenHere[*knightX][*knightY] = 1;
	}
} // End hasVisited
/******************************************************************************
	Function: printChessboard()
	Description: Prints current knight position on the chessboard
	Side Effects: ---
	Parameters: board array, pointers to knightX and knightY
	Return: ---
******************************************************************************/
void printChessboard(int array[ROWS][COLUMNS], int* knightX, int* knightY) {
	for (size_t i = 0; i < ROWS; ++i) {
		for (size_t j = 0; j < COLUMNS; ++j) {
			printf("%d ", array[i][j]);
		}
		puts("");
	}
} // End printChessboard
